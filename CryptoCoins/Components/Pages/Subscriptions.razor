@page "/manage-subscriptions"
@inject IJSRuntime JSRuntime
@using System.Collections.Generic
@using System.Text
@using MySql.Data.MySqlClient
@using CryptoCoins.Helpers


<div class="main-group" style="margin: 25px;">
    <div class="form-group" style="margin: 10px;">
        <label for="coin">Name of Coin</label>
        <select id="coin" class="form-control" @bind="SelectedCoin">
            @foreach (var coin in Coins)
            {
                <option value="@coin">@coin</option>
            }
        </select>
    </div>

    <div class="form-group" style="margin: 10px;">
        <label for="amount">Amount</label>
        @* <input id="amount" type="number" class="form-control" @bind="Amount" /> *@
        <select id="amount" class="form-control" @bind="SelectedAmount">
            @foreach (var amount in Amounts)
            {
                <option value="@amount">@amount</option>
            }
        </select>
    </div>

    <div class="form-group" style="margin: 10px;">
        <label for="duration">Duration</label>
        <select id="duration" class="form-control" @bind="SelectedDuration">
            @foreach (var duration in Durations)
            {
                <option value="@duration">@duration</option>
            }
        </select>
    </div>

    <button type="button" class="add-button" @onclick="AddSubscription"
            style="margin: 10px;">
        Add
    </button>

    @if (SubscriptionsColl.Any())
    {
        <h4 style="margin: 10px;">Subscriptions</h4>
        <table class="table">
            <thead style="color: white;">
                <tr>
                    <th>Name of Coin</th>
                    <th>Amount</th>
                    <th>Duration</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var subscription in SubscriptionsColl)
                {
                    <tr style="color: white;">
                        <td>@subscription.Coin</td>
                        <td>@subscription.Amount</td>
                        <td>@subscription.Duration</td>
                        <td>
                            <button class="btn btn-warning formOpenModalButton" @onclick="() => EditSubscription(subscription)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteSubscription(subscription)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<div id="formModal" class="modal fixed w-full h-full top-0 left-0 flex items-center justify-center hidden">
    <!-- Overlay -->
    <div class="modal-overlay absolute w-full h-full bg-gray-900 opacity-50"></div>

    <div class="modal-container w-1/2 md:max-w-md mx-auto rounded shadow-lg z-50 overflow-y-auto">
        <!-- Modal content -->
        <div class="modal-content text-white py-4 text-left px-6" style="background-color:#383838;">
            <div class="form-group" style="margin: 10px;">
                <label for="coin">Name of Coin</label>
                <select id="coin" class="form-control" @bind="editCoin">
                    @foreach (var coin in Coins)
                    {
                        <option value="@coin">@coin</option>
                    }
                </select>
            </div>

            <div class="form-group" style="margin: 10px;">
                <label for="amount">Amount</label>
                @* <input id="amount" type="number" class="form-control" @bind="Amount" /> *@
                <select id="amount" class="form-control" @bind="editAmount">
                    @foreach (var amount in EditingAmounts)
                    {
                        <option value="@amount">@amount</option>
                    }
                </select>
            </div>

            <div class="form-group" style="margin: 10px;">
                <label for="duration">Duration</label>
                <select id="duration" class="form-control" @bind="editDuration">
                    @foreach (var duration in Durations)
                    {
                        <option value="@duration">@duration</option>
                    }
                </select>
            </div>

            <div class="form-group" style="margin: 10px;">
                <td>
                    <button class="btn btn-warning" @onclick="() => UpdateSubscription(editingsubscription)">Update</button>
                    <button id="formCancelButton" class="btn btn-danger formCancelButton">Cancel</button>
                </td>
            </div>
        </div>
    </div>
</div>



@code {

    #region ModalPopup
    // Get references to elements
    private const string FormOpenModalButtonId = "formOpenModalButton";
    private const string FormCloseModalButtonId = "formCancelButton";

    // Function to open modal
    private void OpenModal1(int subcriptionId)
    {
        JSRuntime.InvokeVoidAsync("openModal1", subcriptionId);
    }

    // Function to close modal
    private void CloseModal1()
    {
        JSRuntime.InvokeVoidAsync("closeModal1");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                const formOpenModalButtons = document.querySelectorAll('.formOpenModalButton');
                const formCloseModalButton = document.querySelector('.formCancelButton');
                const modal1 = document.querySelector('#formModal');

                formOpenModalButtons.forEach(button => {
                    button.addEventListener('click', openModal1);
                });

                formCloseModalButton.addEventListener('click', closeModal1);

                function openModal1(event) {
                    // Get the index of the button that was clicked
                    const index = Array.from(formOpenModalButtons).indexOf(event.target);
                    modal1.classList.remove('hidden');
                    // Pass the index to your JavaScript function to handle specific modal content
                    showModalContent(index);
                }

                function closeModal1() {
                    modal1.classList.add('hidden');
                }

                function showModalContent(index) {
                    // Customize modal content based on the index
                    // You can use this function to show different content for each modal
                }
            ");
        }
    }

    #endregion

    private string _selectedCoin;

    private string SelectedCoin
    {
        get => _selectedCoin;
        set
        {
            if (_selectedCoin != value)
            {
                _selectedCoin = value;
                UpdateAmounts();
            }
        }
    }

    private string Amount { get; set; }
    private string SelectedDuration { get; set; }
    private string SelectedAmount { get; set; }

    private List<string> Coins = new List<string> { "BTC", "ETH", "BNB", "ALL COINS" };
    private List<string> Durations = new List<string> {"1 Month"};
    private List<string> Amounts = new List<string>();
    private List<string> EditingAmounts = new List<string>();

    private List<Subscription> SubscriptionsColl = new List<Subscription>();

    protected override void OnInitialized()
    {
        SelectedDuration = Durations[0];
        SelectedCoin = Coins[0];
        UpdateAmounts();
        LoadSubscriptions();
    }

    private void LoadSubscriptions()
    {
        SubscriptionsColl.Clear();
        using (MySqlConnection connection = StGlobal.GetSqlConnection())
        {
            connection.Open();

            string query = "SELECT CoinName, Amount, Duration,Id FROM ManageSubscriptions";
            MySqlCommand command = new MySqlCommand(query, connection);
            //command.Parameters.AddWithValue("@User_Id", StGlobal.Id);
            MySqlDataReader reader = command.ExecuteReader();

            while (reader.Read())
            {
                SubscriptionsColl.Add(new Subscription
                    {
                        Coin = reader.GetString(reader.GetOrdinal("CoinName")),
                        Amount = ExtractDigits(reader.GetString(reader.GetOrdinal("Amount"))),
                        Duration = reader.GetString(reader.GetOrdinal("Duration")),
                        Id = reader.GetInt32(reader.GetOrdinal("Id")),
                        User_Id = StGlobal.Id
                    });
            }
        }
    }

    private void UpdateAmounts()
    {
        Amounts.Clear();
        int i = 0;
        switch (SelectedCoin)
        {
            case "BTC":
                //Amounts.AddRange(new[] { "BTC - 300", "BTC - 350", "BTC - 400" });
                Amounts = new List<string> { "BTC - 300", "BTC - 350", "BTC - 400" };
                break;
            case "ETH":
                Amounts = new List<string> { "ETH - 200", "ETH - 250", "ETH - 300" };
                i = 1;
                //Amounts.AddRange(new[] { "ETH - 200", "ETH - 250", "ETH - 300" });
                break;
            case "BNB":
                Amounts = new List<string> { "BNB - 150", "BNB - 200", "BNB - 250" };
                i = 2;
                //Amounts.AddRange(new[] { "BNB - 150", "BNB - 200", "BNB - 250" });
                break;
            case "ALL COINS":
                Amounts = new List<string> { "ALL COINS - 699", "ALL COINS - 799", "ALL COINS - 899" };
                i = 3;
                //Amounts.AddRange(new[] { "BNB - 150", "BNB - 200", "BNB - 250" });
                break;
            default:
                break;
        }
        //SelectedAmount = Int32.Parse(Amounts[0].Split(' ')[1]);
        SelectedAmount = Amounts[0];
    }

    private async void AddSubscription()
    {
        // SubscriptionsColl.Add(new Subscription
        //     {
        //         Coin = SelectedCoin,
        //         Amount = ExtractDigits(SelectedAmount),
        //         Duration = SelectedDuration
        //     });

        if (IsCoinNameExisting(SelectedCoin))
        {
            await Application.Current.MainPage.DisplayAlert("Message", $"{SelectedCoin} already exists. You can modify and update it.", "OK");
            return;
        }

        using (MySqlConnection connection = StGlobal.GetSqlConnection())
        {
            connection.Open();

            string query = "INSERT INTO ManageSubscriptions (CoinName, Amount, Duration) VALUES (@CoinName, @Amount, @Duration)";
            MySqlCommand command = new MySqlCommand(query, connection);
            command.Parameters.AddWithValue("@CoinName", SelectedCoin);
            command.Parameters.AddWithValue("@Amount", SelectedAmount);
            command.Parameters.AddWithValue("@Duration", SelectedDuration);

            int rowsAffected = command.ExecuteNonQuery();

            if (rowsAffected > 0)
            {
                LoadSubscriptions();
            }
        }
        // Reset the fields after adding the subscription
        //SelectedCoin = Coins[0];
        //SelectedAmount = Amounts[0];
        /////Amount = 0;
        //SelectedDuration = Durations[0];
    }

    public bool IsCoinNameExisting(string coinName)
    {
        return SubscriptionsColl.Any(sub => sub.Coin == coinName);
    }

    private string ExtractDigits(string input)
    {
        StringBuilder digits = new StringBuilder();
        foreach (char c in input)
        {
            if (char.IsDigit(c))
            {
                digits.Append(c);
            }
        }
        return digits.ToString();
    }

    private async void DeleteSubscription(Subscription subscription)
    {
        // Delete wallet from database
        using (MySqlConnection connection = StGlobal.GetSqlConnection())
        {
            connection.Open();

            string query = "DELETE FROM ManageSubscriptions WHERE Id = @Id";
            MySqlCommand command = new MySqlCommand(query, connection);
            command.Parameters.AddWithValue("@Id", subscription.Id);

            int rowsAffected = command.ExecuteNonQuery();

            if (rowsAffected > 0)
            {
                SubscriptionsColl.Remove(subscription);
                await Application.Current.MainPage.DisplayAlert("Success", "Deleted successfully", "OK");
                LoadSubscriptions();
            }
        }
    }

    private void EditSubscription(Subscription subscription)
    {
        editingsubscription = subscription;
        editId = subscription.Id;
        editCoin = subscription.Coin;
        int index = EditingAmounts.FindIndex(s => s.Contains(subscription.Amount));
        editAmount = EditingAmounts[index];
        editDuration = subscription.Duration;
        OpenModal1(subscription.Id);
        // Implement edit functionality if needed
    }

    private string _editCoin;

    private string editCoin
    {
        get => _editCoin;
        set
        {
            if (_editCoin != value)
            {
                _editCoin = value;
                UpdateEditngAmounts();
            }
        }
    }

    private void UpdateEditngAmounts()
    {
        EditingAmounts.Clear();
        int i = 0;
        switch (editCoin)
        {
            case "BTC":
                //Amounts.AddRange(new[] { "BTC - 300", "BTC - 350", "BTC - 400" });
                EditingAmounts = new List<string> { "BTC - 300", "BTC - 350", "BTC - 400" };
                break;
            case "ETH":
                EditingAmounts = new List<string> { "ETH - 200", "ETH - 250", "ETH - 300" };
                i = 1;
                //Amounts.AddRange(new[] { "ETH - 200", "ETH - 250", "ETH - 300" });
                break;
            case "BNB":
                EditingAmounts = new List<string> { "BNB - 150", "BNB - 200", "BNB - 250" };
                i = 2;
                //Amounts.AddRange(new[] { "BNB - 150", "BNB - 200", "BNB - 250" });
                break;
            case "ALL COINS":
                EditingAmounts = new List<string> { "ALL COINS - 699", "ALL COINS - 799", "ALL COINS - 899" };
                i = 3;
                //Amounts.AddRange(new[] { "BNB - 150", "BNB - 200", "BNB - 250" });
                break;
            default:
                break;
        }
        //SelectedAmount = Int32.Parse(Amounts[0].Split(' ')[1]);
        //SelectedAmount = Amounts[0];
    }

    private Subscription editingsubscription;
    private int editId;
    //private string editCoin;
    private string editAmount;
    private string editDuration;

    private async void UpdateSubscription(Subscription subscription)
    {
        using (MySqlConnection connection = StGlobal.GetSqlConnection())
        {
            connection.Open();
            string query = "UPDATE ManageSubscriptions SET CoinName = @CoinName, Amount = @Amount,Duration = @Duration WHERE Id = @Id";
            MySqlCommand command = new MySqlCommand(query, connection);
            command.Parameters.AddWithValue("@CoinName", editCoin);
            command.Parameters.AddWithValue("@Amount", editAmount);
            command.Parameters.AddWithValue("@Duration", editDuration);
            command.Parameters.AddWithValue("@Id", editId);

            int rowsAffected = command.ExecuteNonQuery();

            if (rowsAffected > 0)
            {
                // Update successful
                Console.WriteLine("update successfully.");
                LoadSubscriptions();
                CloseModal1();
            }
            else
            {
                Console.WriteLine("Not update successfully.");
            }
        }
    }

    public class Subscription
    {
        public int Id { get; set; }
        public string Coin { get; set; }
        public string Amount { get; set; }
        public string Duration { get; set; }
        public int User_Id { get; set; }
    }
}

<script>

    // Get references to elements
    const formOpenModalButton = document.getElementById('formOpenModalButton');
    const formCloseModalButton = document.getElementById('formCancelButton');
    const modal1 = document.getElementById('formModal');

    // Function to open modal
    function openModal1() {
        modal1.classList.remove('hidden');
    }

    // Function to close modal
    function closeModal1() {
        modal1.classList.add('hidden');
    }

    // Event listeners to toggle modal visibility
    formOpenModalButton.addEventListener('click', openModal1);
    formCloseModalButton.addEventListener('click', closeModal1);
</script>
